//===- Transforms/Instrumentation/InstrumentorConfig.def ------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
//===----------------------------------------------------------------------===//

// No include guards

/// Base configuration
///{
SECTION_START(Base, )

/// The base name which defines the runtime call names, i.a.,
/// <BaseName><instruction/location>(...)
CONFIG(Base, std::string, RuntimeName, "__instrumentor_")

/// Print the signatures of all used runtime functions.
CONFIG(Base, bool, PrintRuntimeSignatures, true)

SECTION_END(Base)
///}

/// AllocaInst
///{
SECTION_START(Alloca, AllocaInst)

/// Should allocas be instrumented.
CONFIG(Alloca, bool, Instrument, true)

/// Selection of information passed to the runtime.
///{
/// The actual allocated pointer.
CONFIG(Alloca, bool, Value, true)
/// The size of the entire allocation.
CONFIG(Alloca, bool, AllocationSize, true)
/// The minimal alignment requested statically.
CONFIG(Alloca, bool, Alignment, true)
///}

/// Should the value be replaced by the runtime call result.
CONFIG(Alloca, bool, ReplaceValue, true)

/// Optional callback, see CallbackTy.
CONFIG_INTERNAL(Alloca, CallbackTy, CB, nullptr)

SECTION_END(Alloca)
///}

/// StoreInst
///{
SECTION_START(Store, StoreInst)

/// Should stores be instrumented.
CONFIG(Store, bool, Instrument, true)

/// Selection of information passed to the runtime.
///{
/// The pointer operand.
CONFIG(Store, bool, PointerOperand, true)
/// The pointer operand address space.
CONFIG(Store, bool, PointerOperandAddressSpace, true)
/// The value operand, passed as 64-bit integer.
CONFIG(Store, bool, ValueOperand, true)
/// The value operand size.
CONFIG(Store, bool, ValueOperandSize, true)
/// The value operand type id.
CONFIG(Store, bool, ValueOperandTypeId, true)
/// The minimal alignment requested statically.
CONFIG(Store, bool, Alignment, true)
/// The atomicity ordering.
CONFIG(Store, bool, AtomicityOrdering, true)
/// The sync cope id.
CONFIG(Store, bool, SyncScopeId, true)
/// The volatile flag.
CONFIG(Store, bool, IsVolatile, true)
///}

/// Optional callback, see CallbackTy.
CONFIG_INTERNAL(Store, CallbackTy, CB, nullptr)

SECTION_END(Store)
///}

/// LoadInst
///{
SECTION_START(Load, LoadInst)

/// Should loads be instrumented.
CONFIG(Load, bool, Instrument, true)

/// Should loads be checked before their execution.
CONFIG(Load, bool, CheckBefore, true)

/// Selection of information passed to the runtime.
///{
/// The pointer operand.
CONFIG(Load, bool, PointerOperand, true)
/// The pointer operand address space.
CONFIG(Load, bool, PointerOperandAddressSpace, true)
/// The loaded value, passed as 64-bit integer.
CONFIG(Load, bool, Value, true)
/// The value size.
CONFIG(Load, bool, ValueSize, true)
/// The value type id.
CONFIG(Load, bool, ValueTypeId, true)
/// The minimal alignment requested statically.
CONFIG(Load, bool, Alignment, true)
/// The atomicity ordering.
CONFIG(Load, bool, AtomicityOrdering, true)
/// The sync cope id.
CONFIG(Load, bool, SyncScopeId, true)
/// The volatile flag.
CONFIG(Load, bool, IsVolatile, true)
///}

/// Should the value be replaced by the runtime call result.
CONFIG(Alloca, bool, ReplaceValue, true)

/// Optional callback, see CallbackTy.
CONFIG_INTERNAL(Load, CallbackTy, CB, nullptr)

SECTION_END(Load)
///}

/// AllocationCall
///{
SECTION_START(AllocationCall, CallBase)

/// Should allocation calls, i.a., malloc, new, be instrumented.
CONFIG(AllocationCall, bool, Instrument, true)

/// Selection of information passed to the runtime.
///{
/// The allocation result, passed as void *.
CONFIG(AllocationCall, bool, MemoryPointer, true)
/// The allocation memory size.
CONFIG(AllocationCall, bool, MemorySize, true)
/// The minimal alignment requested statically.
CONFIG(AllocationCall, bool, Alignment, true)
/// The allocation family, passed as a C string.
CONFIG(AllocationCall, bool, Family, true)
/// The initial allocation value: 0 for zeros, 1, for undef, or -1 if unknown.
CONFIG(AllocationCall, bool, InitialValue, true)
///}

/// Should the value be replaced by the runtime call result.
CONFIG(Alloca, bool, ReplaceValue, true)

/// Optional callback, see CallbackTy.
CONFIG_INTERNAL(AllocationCall, CallbackTy, CB, nullptr)

SECTION_END(AllocationCall)
///}

/// MemoryIntrinsics
///{
SECTION_START(MemoryIntrinsics, CallBase)

/// Should memory intrinsics, i.a., memset, memcpy, be instrumented.
CONFIG(MemoryIntrinsics, bool, Instrument, true)

/// Selection of information passed to the runtime.
///{
/// The kind identifier (memset, memset_inline, ...)
CONFIG(MemoryIntrinsics, bool, KindId, true)
/// The destination pointer.
CONFIG(MemoryIntrinsics, bool, DestinationPointer, true)
/// The destination pointer address space.
CONFIG(MemoryIntrinsics, bool, DestinationPointerAddressSpace, true)
/// The source pointer.
CONFIG(MemoryIntrinsics, bool, SourcePointer, true)
/// The source pointer address space.
CONFIG(MemoryIntrinsics, bool, SourcePointerAddressSpace, true)
/// The memset value (2x i64).
CONFIG(MemoryIntrinsics, bool, MemsetValue, true)
/// The length of the operation in bytes.
CONFIG(MemoryIntrinsics, bool, Length, true)
/// The volatile flag.
CONFIG(MemoryIntrinsics, bool, IsVolatile, true)
/// The atomic element size.
CONFIG(MemoryIntrinsics, bool, AtomicElementSize, true)
///}

/// Should the value be replaced by the runtime call result.
CONFIG(MemoryIntrinsics, bool, ReplaceValue, true)

/// Optional callback, see CallbackTy.
CONFIG_INTERNAL(MemoryIntrinsics, CallbackTy, CB, nullptr)

SECTION_END(MemoryIntrinsics)
///}

#undef SECTION_START
#undef CONFIG
#undef CONFIG_INTERNAL
#undef SECTION_END
