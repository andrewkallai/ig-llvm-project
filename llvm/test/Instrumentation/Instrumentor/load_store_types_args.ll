; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=instrumentor -S | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"


define noundef zeroext i1 @_Z15store_load_boolPbb(ptr nocapture noundef initializes((0, 1)) %A, i1 noundef zeroext %Val) {
; CHECK-LABEL: define noundef zeroext i1 @_Z15store_load_boolPbb(
; CHECK-SAME: ptr nocapture noundef initializes((0, 1)) [[A:%.*]], i1 noundef zeroext [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[STOREDV:%.*]] = zext i1 [[VAL]] to i8
; CHECK-NEXT:    store i8 [[STOREDV]], ptr [[A]], align 1
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 1
; CHECK-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; CHECK-NEXT:    [[LOADEDV2:%.*]] = trunc nuw i8 [[TMP1]] to i1
; CHECK-NEXT:    ret i1 [[LOADEDV2]]
;
entry:
  %storedv = zext i1 %Val to i8
  store i8 %storedv, ptr %A, align 1
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 1
  %0 = load i8, ptr %arrayidx, align 1
  %loadedv2 = trunc nuw i8 %0 to i1
  ret i1 %loadedv2
}


define noundef signext i8 @_Z15store_load_charPcc(ptr nocapture noundef initializes((0, 1)) %A, i8 noundef signext %Val) {
; CHECK-LABEL: define noundef signext i8 @_Z15store_load_charPcc(
; CHECK-SAME: ptr nocapture noundef initializes((0, 1)) [[A:%.*]], i8 noundef signext [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    store i8 [[VAL]], ptr [[A]], align 1
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 1
; CHECK-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; CHECK-NEXT:    ret i8 [[TMP1]]
;
entry:
  store i8 %Val, ptr %A, align 1
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 1
  %0 = load i8, ptr %arrayidx, align 1
  ret i8 %0
}


define noundef signext i16 @_Z16store_load_shortPss(ptr nocapture noundef initializes((0, 2)) %A, i16 noundef signext %Val) {
; CHECK-LABEL: define noundef signext i16 @_Z16store_load_shortPss(
; CHECK-SAME: ptr nocapture noundef initializes((0, 2)) [[A:%.*]], i16 noundef signext [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    store i16 [[VAL]], ptr [[A]], align 2
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 2
; CHECK-NEXT:    [[TMP1:%.*]] = load i16, ptr [[ARRAYIDX]], align 2
; CHECK-NEXT:    ret i16 [[TMP1]]
;
entry:
  store i16 %Val, ptr %A, align 2
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 2
  %0 = load i16, ptr %arrayidx, align 2
  ret i16 %0
}


define noundef i32 @_Z14store_load_intPii(ptr nocapture noundef initializes((0, 4)) %A, i32 noundef %Val) {
; CHECK-LABEL: define noundef i32 @_Z14store_load_intPii(
; CHECK-SAME: ptr nocapture noundef initializes((0, 4)) [[A:%.*]], i32 noundef [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    store i32 [[VAL]], ptr [[A]], align 4
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 4
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    ret i32 [[TMP1]]
;
entry:
  store i32 %Val, ptr %A, align 4
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 4
  %0 = load i32, ptr %arrayidx, align 4
  ret i32 %0
}


define noundef i64 @_Z15store_load_longPll(ptr nocapture noundef initializes((0, 8)) %A, i64 noundef %Val) {
; CHECK-LABEL: define noundef i64 @_Z15store_load_longPll(
; CHECK-SAME: ptr nocapture noundef initializes((0, 8)) [[A:%.*]], i64 noundef [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    store i64 [[VAL]], ptr [[A]], align 8
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 8
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[ARRAYIDX]], align 8
; CHECK-NEXT:    ret i64 [[TMP0]]
;
entry:
  store i64 %Val, ptr %A, align 8
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 8
  %0 = load i64, ptr %arrayidx, align 8
  ret i64 %0
}


define noundef i128 @_Z20store_load_long_longPxx(ptr nocapture noundef initializes((0, 16)) %A, i128 noundef %Val) {
; CHECK-LABEL: define noundef i128 @_Z20store_load_long_longPxx(
; CHECK-SAME: ptr nocapture noundef initializes((0, 16)) [[A:%.*]], i128 noundef [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    store i128 [[VAL]], ptr [[A]], align 8
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 16
; CHECK-NEXT:    [[TMP1:%.*]] = load i128, ptr [[ARRAYIDX]], align 8
; CHECK-NEXT:    ret i128 [[TMP1]]
;
entry:
  store i128 %Val, ptr %A, align 8
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 16
  %0 = load i128, ptr %arrayidx, align 8
  ret i128 %0
}


define noundef float @_Z16store_load_floatPff(ptr nocapture noundef initializes((0, 4)) %A, float noundef %Val) {
; CHECK-LABEL: define noundef float @_Z16store_load_floatPff(
; CHECK-SAME: ptr nocapture noundef initializes((0, 4)) [[A:%.*]], float noundef [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    store float [[VAL]], ptr [[A]], align 4
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 4
; CHECK-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    ret float [[TMP2]]
;
entry:
  store float %Val, ptr %A, align 4
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 4
  %0 = load float, ptr %arrayidx, align 4
  ret float %0
}


define noundef double @_Z17store_load_doublePdd(ptr nocapture noundef initializes((0, 8)) %A, double noundef %Val) {
; CHECK-LABEL: define noundef double @_Z17store_load_doublePdd(
; CHECK-SAME: ptr nocapture noundef initializes((0, 8)) [[A:%.*]], double noundef [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    store double [[VAL]], ptr [[A]], align 8
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 8
; CHECK-NEXT:    [[TMP1:%.*]] = load double, ptr [[ARRAYIDX]], align 8
; CHECK-NEXT:    ret double [[TMP1]]
;
entry:
  store double %Val, ptr %A, align 8
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 8
  %0 = load double, ptr %arrayidx, align 8
  ret double %0
}


define noundef x86_fp80 @_Z22store_load_long_doublePee(ptr nocapture noundef initializes((0, 10)) %A, x86_fp80 noundef %Val) {
; CHECK-LABEL: define noundef x86_fp80 @_Z22store_load_long_doublePee(
; CHECK-SAME: ptr nocapture noundef initializes((0, 10)) [[A:%.*]], x86_fp80 noundef [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    store x86_fp80 [[VAL]], ptr [[A]], align 16
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 16
; CHECK-NEXT:    [[TMP1:%.*]] = load x86_fp80, ptr [[ARRAYIDX]], align 16
; CHECK-NEXT:    ret x86_fp80 [[TMP1]]
;
entry:
  store x86_fp80 %Val, ptr %A, align 16
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 16
  %0 = load x86_fp80, ptr %arrayidx, align 16
  ret x86_fp80 %0
}
