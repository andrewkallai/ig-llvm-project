; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals all --version 5
; RUN: opt < %s -passes=instrumentor -S | FileCheck %s

declare noalias ptr @malloc(i64) allockind("alloc,uninitialized") allocsize(0) "alloc-family"="malloc"
declare noalias ptr @calloc(i64, i64) allockind("alloc,zeroed") allocsize(0,1) "alloc-family"="malloc"
declare noalias ptr @realloc(ptr nocapture, i64) allockind("realloc") allocsize(1) "alloc-family"="malloc"
declare noalias nonnull ptr @_Znam(i64) ; throwing version of 'new'
declare noalias nonnull ptr @_Znwm(i64) ; throwing version of 'new'
declare noalias ptr @strdup(ptr)
declare noalias ptr @aligned_alloc(i64 allocalign, i64) allockind("alloc,uninitialized,aligned") allocsize(1) "alloc-family"="malloc"
declare noalias align 16 ptr @memalign(i64 allocalign, i64) allocsize(1)
; new[](unsigned int, align_val_t)
declare noalias ptr @_ZnamSt11align_val_t(i64 %size, i64 %align)

declare ptr @my_malloc(i64) allocsize(0)
declare ptr @my_calloc(i64, i64) allocsize(0, 1)

@.str = private unnamed_addr constant [6 x i8] c"hello\00", align 1

;.
; CHECK: @.str = private unnamed_addr constant [6 x i8] c"hello\00", align 1
; CHECK: @llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 0, ptr @__instrumentor_ctor, ptr null }]
; CHECK: @llvm.global_dtors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 0, ptr @__instrumentor_dtor, ptr null }]
; CHECK: @__instrumentor_str = private unnamed_addr constant [8 x i8] c"<stdin>\00", align 1
; CHECK: @__instrumentor_str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
; CHECK: @__instrumentor_str.2 = private unnamed_addr constant [7 x i8] c"malloc\00", align 1
; CHECK: @__instrumentor_str.3 = private unnamed_addr constant [6 x i8] c"_Znam\00", align 1
; CHECK: @__instrumentor_str.4 = private unnamed_addr constant [6 x i8] c"_Znwm\00", align 1
; CHECK: @__instrumentor_str.5 = private unnamed_addr constant [21 x i8] c"_ZnamSt11align_val_t\00", align 1
;.
define noalias ptr @malloc_nonconstant_size(i64 %n) {
; CHECK-LABEL: define noalias ptr @malloc_nonconstant_size(
; CHECK-SAME: i64 [[N:%.*]]) {
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @malloc(i64 [[N]])
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 [[N]], i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call noalias ptr @malloc(i64 %n)
  ret ptr %call
}

define noalias ptr @malloc_constant_size() {
; CHECK-LABEL: define noalias ptr @malloc_constant_size() {
; CHECK-NEXT:    [[CALL1:%.*]] = tail call noalias ptr @malloc(i64 40)
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL1]], i64 40, i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    ret ptr [[CALL]]
;
  %call = tail call noalias ptr @malloc(i64 40)
  ret ptr %call
}

define noalias ptr @aligned_alloc_constant_size() {
; CHECK-LABEL: define noalias ptr @aligned_alloc_constant_size() {
; CHECK-NEXT:    [[CALL1:%.*]] = tail call noalias ptr @aligned_alloc(i64 32, i64 512)
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL1]], i64 512, i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    ret ptr [[CALL]]
;
  %call = tail call noalias ptr @aligned_alloc(i64 32, i64 512)
  ret ptr %call
}

define noalias ptr @aligned_alloc_unknown_size_nonzero(i1 %c) {
; CHECK-LABEL: define noalias ptr @aligned_alloc_unknown_size_nonzero(
; CHECK-SAME: i1 [[C:%.*]]) {
; CHECK-NEXT:    [[SIZE:%.*]] = select i1 [[C]], i64 64, i64 128
; CHECK-NEXT:    [[CALL1:%.*]] = tail call noalias ptr @aligned_alloc(i64 32, i64 [[SIZE]])
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL1]], i64 [[SIZE]], i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    ret ptr [[CALL]]
;
  %size = select i1 %c, i64 64, i64 128
  %call = tail call noalias ptr @aligned_alloc(i64 32, i64 %size)
  ret ptr %call
}

define noalias ptr @aligned_alloc_unknown_size_possibly_zero(i1 %c) {
; CHECK-LABEL: define noalias ptr @aligned_alloc_unknown_size_possibly_zero(
; CHECK-SAME: i1 [[C:%.*]]) {
; CHECK-NEXT:    [[SIZE:%.*]] = select i1 [[C]], i64 64, i64 0
; CHECK-NEXT:    [[CALL1:%.*]] = tail call noalias ptr @aligned_alloc(i64 32, i64 [[SIZE]])
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL1]], i64 [[SIZE]], i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    ret ptr [[CALL]]
;
  %size = select i1 %c, i64 64, i64 0
  %call = tail call noalias ptr @aligned_alloc(i64 32, i64 %size)
  ret ptr %call
}

define noalias ptr @aligned_alloc_unknown_align(i64 %align) {
; CHECK-LABEL: define noalias ptr @aligned_alloc_unknown_align(
; CHECK-SAME: i64 [[ALIGN:%.*]]) {
; CHECK-NEXT:    [[CALL1:%.*]] = tail call noalias ptr @aligned_alloc(i64 [[ALIGN]], i64 128)
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL1]], i64 128, i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    ret ptr [[CALL]]
;
  %call = tail call noalias ptr @aligned_alloc(i64 %align, i64 128)
  ret ptr %call
}

declare noalias ptr @foo(ptr, ptr, ptr)

define noalias ptr @aligned_alloc_dynamic_args(i64 %align, i64 %size) {
; CHECK-LABEL: define noalias ptr @aligned_alloc_dynamic_args(
; CHECK-SAME: i64 [[ALIGN:%.*]], i64 [[SIZE:%.*]]) {
; CHECK-NEXT:    [[CALL1:%.*]] = tail call noalias ptr @aligned_alloc(i64 [[ALIGN]], i64 1024)
; CHECK-NEXT:    [[TMP4:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL1]], i64 1024, i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    [[CALL_3:%.*]] = tail call noalias ptr @aligned_alloc(i64 0, i64 1024)
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL_3]], i64 1024, i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    [[CALL_4:%.*]] = tail call noalias ptr @aligned_alloc(i64 32, i64 [[SIZE]])
; CHECK-NEXT:    [[TMP3:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL_4]], i64 [[SIZE]], i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    [[TMP6:%.*]] = ptrtoint ptr [[TMP4]] to i64
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @__instrumentor_pre_call_arg(i64 [[TMP6]], i32 14)
; CHECK-NEXT:    [[CALL:%.*]] = inttoptr i64 [[TMP5]] to ptr
; CHECK-NEXT:    [[TMP7:%.*]] = ptrtoint ptr [[TMP2]] to i64
; CHECK-NEXT:    [[TMP8:%.*]] = call i64 @__instrumentor_pre_call_arg(i64 [[TMP7]], i32 14)
; CHECK-NEXT:    [[CALL_1:%.*]] = inttoptr i64 [[TMP8]] to ptr
; CHECK-NEXT:    [[TMP10:%.*]] = ptrtoint ptr [[TMP3]] to i64
; CHECK-NEXT:    [[TMP11:%.*]] = call i64 @__instrumentor_pre_call_arg(i64 [[TMP10]], i32 14)
; CHECK-NEXT:    [[CALL_2:%.*]] = inttoptr i64 [[TMP11]] to ptr
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @foo(ptr [[CALL]], ptr [[CALL_1]], ptr [[CALL_2]])
; CHECK-NEXT:    ret ptr [[TMP4]]
;
  %call = tail call noalias ptr @aligned_alloc(i64 %align, i64 1024)
  %call_1 = tail call noalias ptr @aligned_alloc(i64 0, i64 1024)
  %call_2 = tail call noalias ptr @aligned_alloc(i64 32, i64 %size)

  call ptr @foo(ptr %call, ptr %call_1, ptr %call_2)
  ret ptr %call
}

define noalias ptr @memalign_constant_size() {
; CHECK-LABEL: define noalias ptr @memalign_constant_size() {
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @memalign(i64 32, i64 512)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 512, i64 -1, ptr @__instrumentor_str.1, i8 -1)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call noalias ptr @memalign(i64 32, i64 512)
  ret ptr %call
}

define noalias ptr @memalign_unknown_size_nonzero(i1 %c) {
; CHECK-LABEL: define noalias ptr @memalign_unknown_size_nonzero(
; CHECK-SAME: i1 [[C:%.*]]) {
; CHECK-NEXT:    [[SIZE:%.*]] = select i1 [[C]], i64 64, i64 128
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @memalign(i64 32, i64 [[SIZE]])
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 [[SIZE]], i64 -1, ptr @__instrumentor_str.1, i8 -1)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %size = select i1 %c, i64 64, i64 128
  %call = tail call noalias ptr @memalign(i64 32, i64 %size)
  ret ptr %call
}

define noalias ptr @memalign_unknown_size_possibly_zero(i1 %c) {
; CHECK-LABEL: define noalias ptr @memalign_unknown_size_possibly_zero(
; CHECK-SAME: i1 [[C:%.*]]) {
; CHECK-NEXT:    [[SIZE:%.*]] = select i1 [[C]], i64 64, i64 0
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @memalign(i64 32, i64 [[SIZE]])
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 [[SIZE]], i64 -1, ptr @__instrumentor_str.1, i8 -1)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %size = select i1 %c, i64 64, i64 0
  %call = tail call noalias ptr @memalign(i64 32, i64 %size)
  ret ptr %call
}

define noalias ptr @memalign_unknown_align(i64 %align) {
; CHECK-LABEL: define noalias ptr @memalign_unknown_align(
; CHECK-SAME: i64 [[ALIGN:%.*]]) {
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @memalign(i64 [[ALIGN]], i64 128)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 128, i64 -1, ptr @__instrumentor_str.1, i8 -1)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call noalias ptr @memalign(i64 %align, i64 128)
  ret ptr %call
}

define noalias ptr @malloc_constant_size2() {
; CHECK-LABEL: define noalias ptr @malloc_constant_size2() {
; CHECK-NEXT:    [[CALL1:%.*]] = tail call noalias dereferenceable_or_null(80) ptr @malloc(i64 40)
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL1]], i64 40, i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    ret ptr [[CALL]]
;
  %call = tail call noalias dereferenceable_or_null(80) ptr @malloc(i64 40)
  ret ptr %call
}

define noalias ptr @malloc_constant_size3() {
; CHECK-LABEL: define noalias ptr @malloc_constant_size3() {
; CHECK-NEXT:    [[CALL1:%.*]] = tail call noalias dereferenceable(80) ptr @malloc(i64 40)
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL1]], i64 40, i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    ret ptr [[CALL]]
;
  %call = tail call noalias dereferenceable(80) ptr @malloc(i64 40)
  ret ptr %call
}

define noalias ptr @malloc_constant_zero_size() {
; CHECK-LABEL: define noalias ptr @malloc_constant_zero_size() {
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @malloc(i64 0)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 0, i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call noalias ptr @malloc(i64 0)
  ret ptr %call
}

define noalias ptr @realloc_nonconstant_size(ptr %p, i64 %n) {
; CHECK-LABEL: define noalias ptr @realloc_nonconstant_size(
; CHECK-SAME: ptr [[P:%.*]], i64 [[N:%.*]]) {
; CHECK-NEXT:    [[TMP3:%.*]] = ptrtoint ptr [[P]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = call i64 @__instrumentor_pre_call_arg(i64 [[TMP3]], i32 14)
; CHECK-NEXT:    [[TMP2:%.*]] = inttoptr i64 [[TMP4]] to ptr
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @realloc(ptr [[TMP2]], i64 [[N]])
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 [[N]], i64 -1, ptr @__instrumentor_str.2, i8 -1)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call noalias ptr @realloc(ptr %p, i64 %n)
  ret ptr %call
}

define noalias ptr @realloc_constant_zero_size(ptr %p) {
; CHECK-LABEL: define noalias ptr @realloc_constant_zero_size(
; CHECK-SAME: ptr [[P:%.*]]) {
; CHECK-NEXT:    [[TMP3:%.*]] = ptrtoint ptr [[P]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = call i64 @__instrumentor_pre_call_arg(i64 [[TMP3]], i32 14)
; CHECK-NEXT:    [[TMP2:%.*]] = inttoptr i64 [[TMP4]] to ptr
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @realloc(ptr [[TMP2]], i64 0)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 0, i64 -1, ptr @__instrumentor_str.2, i8 -1)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call noalias ptr @realloc(ptr %p, i64 0)
  ret ptr %call
}

define noalias ptr @realloc_constant_size(ptr %p) {
; CHECK-LABEL: define noalias ptr @realloc_constant_size(
; CHECK-SAME: ptr [[P:%.*]]) {
; CHECK-NEXT:    [[TMP3:%.*]] = ptrtoint ptr [[P]] to i64
; CHECK-NEXT:    [[TMP2:%.*]] = call i64 @__instrumentor_pre_call_arg(i64 [[TMP3]], i32 14)
; CHECK-NEXT:    [[TMP1:%.*]] = inttoptr i64 [[TMP2]] to ptr
; CHECK-NEXT:    [[CALL1:%.*]] = tail call noalias ptr @realloc(ptr [[TMP1]], i64 40)
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL1]], i64 40, i64 -1, ptr @__instrumentor_str.2, i8 -1)
; CHECK-NEXT:    ret ptr [[CALL]]
;
  %call = tail call noalias ptr @realloc(ptr %p, i64 40)
  ret ptr %call
}

define noalias ptr @calloc_nonconstant_size(i64 %n) {
; CHECK-LABEL: define noalias ptr @calloc_nonconstant_size(
; CHECK-SAME: i64 [[N:%.*]]) {
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @calloc(i64 1, i64 [[N]])
; CHECK-NEXT:    [[TMP2:%.*]] = mul i64 1, [[N]]
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 [[TMP2]], i64 -1, ptr @__instrumentor_str.2, i8 0)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call noalias ptr @calloc(i64 1, i64 %n)
  ret ptr %call
}

define noalias ptr @calloc_nonconstant_size2(i64 %n) {
; CHECK-LABEL: define noalias ptr @calloc_nonconstant_size2(
; CHECK-SAME: i64 [[N:%.*]]) {
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @calloc(i64 [[N]], i64 0)
; CHECK-NEXT:    [[TMP2:%.*]] = mul i64 [[N]], 0
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 [[TMP2]], i64 -1, ptr @__instrumentor_str.2, i8 0)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call noalias ptr @calloc(i64 %n, i64 0)
  ret ptr %call
}

define noalias ptr @calloc_nonconstant_size3(i64 %n) {
; CHECK-LABEL: define noalias ptr @calloc_nonconstant_size3(
; CHECK-SAME: i64 [[N:%.*]]) {
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @calloc(i64 [[N]], i64 [[N]])
; CHECK-NEXT:    [[TMP2:%.*]] = mul i64 [[N]], [[N]]
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 [[TMP2]], i64 -1, ptr @__instrumentor_str.2, i8 0)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call noalias ptr @calloc(i64 %n, i64 %n)
  ret ptr %call
}

define noalias ptr @calloc_constant_zero_size() {
; CHECK-LABEL: define noalias ptr @calloc_constant_zero_size() {
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @calloc(i64 0, i64 0)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 0, i64 -1, ptr @__instrumentor_str.2, i8 0)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call noalias ptr @calloc(i64 0, i64 0)
  ret ptr %call
}

define noalias ptr @calloc_constant_zero_size2(i64 %n) {
; CHECK-LABEL: define noalias ptr @calloc_constant_zero_size2(
; CHECK-SAME: i64 [[N:%.*]]) {
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @calloc(i64 [[N]], i64 0)
; CHECK-NEXT:    [[TMP2:%.*]] = mul i64 [[N]], 0
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 [[TMP2]], i64 -1, ptr @__instrumentor_str.2, i8 0)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call noalias ptr @calloc(i64 %n, i64 0)
  ret ptr %call
}


define noalias ptr @calloc_constant_zero_size3(i64 %n) {
; CHECK-LABEL: define noalias ptr @calloc_constant_zero_size3(
; CHECK-SAME: i64 [[N:%.*]]) {
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @calloc(i64 0, i64 [[N]])
; CHECK-NEXT:    [[TMP2:%.*]] = mul i64 0, [[N]]
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 [[TMP2]], i64 -1, ptr @__instrumentor_str.2, i8 0)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call noalias ptr @calloc(i64 0, i64 %n)
  ret ptr %call
}

define noalias ptr @calloc_constant_zero_size4(i64 %n) {
; CHECK-LABEL: define noalias ptr @calloc_constant_zero_size4(
; CHECK-SAME: i64 [[N:%.*]]) {
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @calloc(i64 0, i64 1)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 0, i64 -1, ptr @__instrumentor_str.2, i8 0)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call noalias ptr @calloc(i64 0, i64 1)
  ret ptr %call
}

define noalias ptr @calloc_constant_zero_size5(i64 %n) {
; CHECK-LABEL: define noalias ptr @calloc_constant_zero_size5(
; CHECK-SAME: i64 [[N:%.*]]) {
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @calloc(i64 1, i64 0)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 0, i64 -1, ptr @__instrumentor_str.2, i8 0)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call noalias ptr @calloc(i64 1, i64 0)
  ret ptr %call
}

define noalias ptr @calloc_constant_size() {
; CHECK-LABEL: define noalias ptr @calloc_constant_size() {
; CHECK-NEXT:    [[CALL1:%.*]] = tail call noalias ptr @calloc(i64 16, i64 8)
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL1]], i64 128, i64 -1, ptr @__instrumentor_str.2, i8 0)
; CHECK-NEXT:    ret ptr [[CALL]]
;
  %call = tail call noalias ptr @calloc(i64 16, i64 8)
  ret ptr %call
}

define noalias ptr @calloc_constant_size_overflow() {
; CHECK-LABEL: define noalias ptr @calloc_constant_size_overflow() {
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @calloc(i64 2000000000000, i64 80000000000)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 -7058095356650717184, i64 -1, ptr @__instrumentor_str.2, i8 0)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call noalias ptr @calloc(i64 2000000000000, i64 80000000000)
  ret ptr %call
}

define noalias ptr @op_new_nonconstant_size(i64 %n) {
; CHECK-LABEL: define noalias ptr @op_new_nonconstant_size(
; CHECK-SAME: i64 [[N:%.*]]) {
; CHECK-NEXT:    [[CALL:%.*]] = tail call ptr @_Znam(i64 [[N]])
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 [[N]], i64 -1, ptr @__instrumentor_str.3, i8 1)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call ptr @_Znam(i64 %n)
  ret ptr %call
}

define noalias ptr @op_new_constant_size() {
; CHECK-LABEL: define noalias ptr @op_new_constant_size() {
; CHECK-NEXT:    [[CALL1:%.*]] = tail call ptr @_Znam(i64 40)
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL1]], i64 40, i64 -1, ptr @__instrumentor_str.3, i8 1)
; CHECK-NEXT:    ret ptr [[CALL]]
;
  %call = tail call ptr @_Znam(i64 40)
  ret ptr %call
}

define noalias ptr @op_new_constant_size2() {
; CHECK-LABEL: define noalias ptr @op_new_constant_size2() {
; CHECK-NEXT:    [[CALL1:%.*]] = tail call ptr @_Znwm(i64 40)
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL1]], i64 40, i64 -1, ptr @__instrumentor_str.4, i8 1)
; CHECK-NEXT:    ret ptr [[CALL]]
;
  %call = tail call ptr @_Znwm(i64 40)
  ret ptr %call
}

define noalias ptr @op_new_constant_zero_size() {
; CHECK-LABEL: define noalias ptr @op_new_constant_zero_size() {
; CHECK-NEXT:    [[CALL:%.*]] = tail call ptr @_Znam(i64 0)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 0, i64 -1, ptr @__instrumentor_str.3, i8 1)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call ptr @_Znam(i64 0)
  ret ptr %call
}

define noalias ptr @strdup_constant_str() {
; CHECK-LABEL: define noalias ptr @strdup_constant_str() {
; CHECK-NEXT:    [[CALL1:%.*]] = tail call noalias ptr @strdup(ptr @.str)
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL1]], i64 -1, i64 -1, ptr @__instrumentor_str.2, i8 -1)
; CHECK-NEXT:    ret ptr [[CALL]]
;
  %call = tail call noalias ptr @strdup(ptr @.str)
  ret ptr %call
}

define noalias ptr @strdup_notconstant_str(ptr %str) {
; CHECK-LABEL: define noalias ptr @strdup_notconstant_str(
; CHECK-SAME: ptr [[STR:%.*]]) {
; CHECK-NEXT:    [[TMP3:%.*]] = ptrtoint ptr [[STR]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = call i64 @__instrumentor_pre_call_arg(i64 [[TMP3]], i32 14)
; CHECK-NEXT:    [[TMP2:%.*]] = inttoptr i64 [[TMP4]] to ptr
; CHECK-NEXT:    [[CALL:%.*]] = tail call noalias ptr @strdup(ptr [[TMP2]])
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 -1, i64 -1, ptr @__instrumentor_str.2, i8 -1)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = tail call noalias ptr @strdup(ptr %str)
  ret ptr %call
}

; OSS-Fuzz #23214
; https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=23214
define noalias ptr @ossfuzz_23214() {
; CHECK-LABEL: define noalias ptr @ossfuzz_23214() {
; CHECK-NEXT:  [[BB:.*:]]
; CHECK-NEXT:    [[AND:%.*]] = and i64 -1, -9223372036854775808
; CHECK-NEXT:    [[CALL1:%.*]] = tail call noalias ptr @aligned_alloc(i64 [[AND]], i64 512)
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL1]], i64 512, i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    ret ptr [[CALL]]
;
bb:
  %and = and i64 -1, -9223372036854775808
  %call = tail call noalias ptr @aligned_alloc(i64 %and, i64 512)
  ret ptr %call
}

define noalias ptr @op_new_align() {
; CHECK-LABEL: define noalias ptr @op_new_align() {
; CHECK-NEXT:    [[CALL1:%.*]] = tail call ptr @_ZnamSt11align_val_t(i64 32, i64 32)
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL1]], i64 32, i64 32, ptr @__instrumentor_str.5, i8 1)
; CHECK-NEXT:    ret ptr [[CALL]]
;
  %call = tail call ptr @_ZnamSt11align_val_t(i64 32, i64 32)
  ret ptr %call
}

define ptr @my_malloc_constant_size() {
; CHECK-LABEL: define ptr @my_malloc_constant_size() {
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @my_malloc(i64 32)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 32, i64 -1, ptr @__instrumentor_str.1, i8 -1)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = call ptr @my_malloc(i64 32)
  ret ptr %call
}

define ptr @my_calloc_constant_size() {
; CHECK-LABEL: define ptr @my_calloc_constant_size() {
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @my_calloc(i64 32, i64 4)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 128, i64 -1, ptr @__instrumentor_str.1, i8 -1)
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %call = call ptr @my_calloc(i64 32, i64 4)
  ret ptr %call
}

define ptr @virtual_constant_size(ptr %alloc) {
; CHECK-LABEL: define ptr @virtual_constant_size(
; CHECK-SAME: ptr [[ALLOC:%.*]]) {
; CHECK-NEXT:    [[CALL1:%.*]] = call ptr [[ALLOC]](i64 16) #[[ATTR5:[0-9]+]]
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL1]], i64 16, i64 -1, ptr @__instrumentor_str.1, i8 -1)
; CHECK-NEXT:    ret ptr [[CALL]]
;
  %call = call ptr %alloc(i64 16) allocsize(0)
  ret ptr %call
}
;.
; CHECK: attributes #[[ATTR0:[0-9]+]] = { allockind("alloc,uninitialized") allocsize(0) "alloc-family"="malloc" }
; CHECK: attributes #[[ATTR1:[0-9]+]] = { allockind("alloc,zeroed") allocsize(0,1) "alloc-family"="malloc" }
; CHECK: attributes #[[ATTR2:[0-9]+]] = { allockind("realloc") allocsize(1) "alloc-family"="malloc" }
; CHECK: attributes #[[ATTR3:[0-9]+]] = { allockind("alloc,uninitialized,aligned") allocsize(1) "alloc-family"="malloc" }
; CHECK: attributes #[[ATTR4:[0-9]+]] = { allocsize(1) }
; CHECK: attributes #[[ATTR5]] = { allocsize(0) }
; CHECK: attributes #[[ATTR6:[0-9]+]] = { allocsize(0,1) }
;.
