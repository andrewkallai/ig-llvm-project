; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals all --version 5
; RUN: opt < %s -passes=instrumentor -S | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"

;.
; CHECK: @llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 0, ptr @__instrumentor_ctor, ptr null }]
; CHECK: @llvm.global_dtors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 0, ptr @__instrumentor_dtor, ptr null }]
; CHECK: @__instrumentor_str = private unnamed_addr constant [8 x i8] c"<stdin>\00", align 1
; CHECK: @__instrumentor_str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
; CHECK: @__instrumentor_str.2 = private unnamed_addr constant [6 x i8] c"_Znwm\00", align 1
; CHECK: @__instrumentor_str.3 = private unnamed_addr constant [21 x i8] c"_ZnwmSt11align_val_t\00", align 1
; CHECK: @__instrumentor_str.4 = private unnamed_addr constant [6 x i8] c"_Znam\00", align 1
; CHECK: @__instrumentor_str.5 = private unnamed_addr constant [21 x i8] c"_ZnamSt11align_val_t\00", align 1
;.
define void @new() {
; CHECK-LABEL: define void @new() {
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @_Znwm(i64 10) #[[ATTR0:[0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 10, i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP2]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP1]])
; CHECK-NEXT:    ret void
;
  %call = call ptr @_Znwm(i64 10) #0
  call void @dummy(ptr %call)
  ret void
}

define void @new_align() {
; CHECK-LABEL: define void @new_align() {
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @_ZnwmSt11align_val_t(i64 10, i64 8) #[[ATTR0]]
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 10, i64 8, ptr @__instrumentor_str.3, i8 1)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP2]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP1]])
; CHECK-NEXT:    ret void
;
  %call = call ptr @_ZnwmSt11align_val_t(i64 10, i64 8) #0
  call void @dummy(ptr %call)
  ret void
}

define void @new_nothrow() {
; CHECK-LABEL: define void @new_nothrow() {
; CHECK-NEXT:    [[NT:%.*]] = alloca i8, align 1
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_alloca(ptr [[NT]], i64 1, i64 1)
; CHECK-NEXT:    [[TMP4:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP1]])
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @_ZnwmRKSt9nothrow_t(i64 10, ptr [[TMP4]]) #[[ATTR0]]
; CHECK-NEXT:    [[TMP3:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 10, i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP3]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP2]])
; CHECK-NEXT:    ret void
;
  %nt = alloca i8
  %call = call ptr @_ZnwmRKSt9nothrow_t(i64 10, ptr %nt) #0
  call void @dummy(ptr %call)
  ret void
}

define void @new_align_nothrow() {
; CHECK-LABEL: define void @new_align_nothrow() {
; CHECK-NEXT:    [[NT:%.*]] = alloca i8, align 1
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_alloca(ptr [[NT]], i64 1, i64 1)
; CHECK-NEXT:    [[TMP4:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP1]])
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @_ZnwmSt11align_val_tRKSt9nothrow_t(i64 10, i64 8, ptr [[TMP4]]) #[[ATTR0]]
; CHECK-NEXT:    [[TMP3:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 10, i64 8, ptr @__instrumentor_str.3, i8 1)
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP3]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP2]])
; CHECK-NEXT:    ret void
;
  %nt = alloca i8
  %call = call ptr @_ZnwmSt11align_val_tRKSt9nothrow_t(i64 10, i64 8, ptr %nt) #0
  call void @dummy(ptr %call)
  ret void
}

define void @array_new() {
; CHECK-LABEL: define void @array_new() {
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @_Znam(i64 10) #[[ATTR0]]
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 10, i64 -1, ptr @__instrumentor_str.4, i8 1)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP2]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP1]])
; CHECK-NEXT:    ret void
;
  %call = call ptr @_Znam(i64 10) #0
  call void @dummy(ptr %call)
  ret void
}

define void @array_new_align() {
; CHECK-LABEL: define void @array_new_align() {
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @_ZnamSt11align_val_t(i64 10, i64 8) #[[ATTR0]]
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 10, i64 8, ptr @__instrumentor_str.5, i8 1)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP2]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP1]])
; CHECK-NEXT:    ret void
;
  %call = call ptr @_ZnamSt11align_val_t(i64 10, i64 8) #0
  call void @dummy(ptr %call)
  ret void
}

define void @array_new_nothrow() {
; CHECK-LABEL: define void @array_new_nothrow() {
; CHECK-NEXT:    [[NT:%.*]] = alloca i8, align 1
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_alloca(ptr [[NT]], i64 1, i64 1)
; CHECK-NEXT:    [[TMP4:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP1]])
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @_ZnamRKSt9nothrow_t(i64 10, ptr [[TMP4]]) #[[ATTR0]]
; CHECK-NEXT:    [[TMP3:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 10, i64 -1, ptr @__instrumentor_str.4, i8 1)
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP3]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP2]])
; CHECK-NEXT:    ret void
;
  %nt = alloca i8
  %call = call ptr @_ZnamRKSt9nothrow_t(i64 10, ptr %nt) #0
  call void @dummy(ptr %call)
  ret void
}

define void @array_new_align_nothrow() {
; CHECK-LABEL: define void @array_new_align_nothrow() {
; CHECK-NEXT:    [[NT:%.*]] = alloca i8, align 1
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_alloca(ptr [[NT]], i64 1, i64 1)
; CHECK-NEXT:    [[TMP4:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP1]])
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @_ZnamSt11align_val_tRKSt9nothrow_t(i64 10, i64 8, ptr [[TMP4]]) #[[ATTR0]]
; CHECK-NEXT:    [[TMP3:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 10, i64 8, ptr @__instrumentor_str.5, i8 1)
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP3]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP2]])
; CHECK-NEXT:    ret void
;
  %nt = alloca i8
  %call = call ptr @_ZnamSt11align_val_tRKSt9nothrow_t(i64 10, i64 8, ptr %nt) #0
  call void @dummy(ptr %call)
  ret void
}

define void @new_hot_cold() {
; CHECK-LABEL: define void @new_hot_cold() {
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @_Znwm12__hot_cold_t(i64 10, i8 7) #[[ATTR0]]
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 10, i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP2]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP1]])
; CHECK-NEXT:    ret void
;
  %call = call ptr @_Znwm12__hot_cold_t(i64 10, i8 7) #0
  call void @dummy(ptr %call)
  ret void
}

define void @new_align_hot_cold() {
; CHECK-LABEL: define void @new_align_hot_cold() {
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @_ZnwmSt11align_val_t12__hot_cold_t(i64 10, i64 8, i8 7) #[[ATTR0]]
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 10, i64 8, ptr @__instrumentor_str.3, i8 1)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP2]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP1]])
; CHECK-NEXT:    ret void
;
  %call = call ptr @_ZnwmSt11align_val_t12__hot_cold_t(i64 10, i64 8, i8 7) #0
  call void @dummy(ptr %call)
  ret void
}

define void @new_nothrow_hot_cold() {
; CHECK-LABEL: define void @new_nothrow_hot_cold() {
; CHECK-NEXT:    [[NT:%.*]] = alloca i8, align 1
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_alloca(ptr [[NT]], i64 1, i64 1)
; CHECK-NEXT:    [[TMP4:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP1]])
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @_ZnwmRKSt9nothrow_t12__hot_cold_t(i64 10, ptr [[TMP4]], i8 7) #[[ATTR0]]
; CHECK-NEXT:    [[TMP3:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 10, i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP3]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP2]])
; CHECK-NEXT:    ret void
;
  %nt = alloca i8
  %call = call ptr @_ZnwmRKSt9nothrow_t12__hot_cold_t(i64 10, ptr %nt, i8 7) #0
  call void @dummy(ptr %call)
  ret void
}

define void @new_align_nothrow_hot_cold() {
; CHECK-LABEL: define void @new_align_nothrow_hot_cold() {
; CHECK-NEXT:    [[NT:%.*]] = alloca i8, align 1
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_alloca(ptr [[NT]], i64 1, i64 1)
; CHECK-NEXT:    [[TMP4:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP1]])
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @_ZnwmSt11align_val_tRKSt9nothrow_t12__hot_cold_t(i64 10, i64 8, ptr [[TMP4]], i8 7) #[[ATTR0]]
; CHECK-NEXT:    [[TMP3:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 10, i64 8, ptr @__instrumentor_str.3, i8 1)
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP3]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP2]])
; CHECK-NEXT:    ret void
;
  %nt = alloca i8
  %call = call ptr @_ZnwmSt11align_val_tRKSt9nothrow_t12__hot_cold_t(i64 10, i64 8, ptr %nt, i8 7) #0
  call void @dummy(ptr %call)
  ret void
}

define void @array_new_hot_cold() {
; CHECK-LABEL: define void @array_new_hot_cold() {
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @_Znam12__hot_cold_t(i64 10, i8 7) #[[ATTR0]]
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 10, i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP2]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP1]])
; CHECK-NEXT:    ret void
;
  %call = call ptr @_Znam12__hot_cold_t(i64 10, i8 7) #0
  call void @dummy(ptr %call)
  ret void
}

define void @array_new_align_hot_cold() {
; CHECK-LABEL: define void @array_new_align_hot_cold() {
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @_ZnamSt11align_val_t12__hot_cold_t(i64 10, i64 8, i8 7) #[[ATTR0]]
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 10, i64 8, ptr @__instrumentor_str.3, i8 1)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP2]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP1]])
; CHECK-NEXT:    ret void
;
  %call = call ptr @_ZnamSt11align_val_t12__hot_cold_t(i64 10, i64 8, i8 7) #0
  call void @dummy(ptr %call)
  ret void
}

define void @array_new_nothrow_hot_cold() {
; CHECK-LABEL: define void @array_new_nothrow_hot_cold() {
; CHECK-NEXT:    [[NT:%.*]] = alloca i8, align 1
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_alloca(ptr [[NT]], i64 1, i64 1)
; CHECK-NEXT:    [[TMP4:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP1]])
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @_ZnamRKSt9nothrow_t12__hot_cold_t(i64 10, ptr [[TMP4]], i8 7) #[[ATTR0]]
; CHECK-NEXT:    [[TMP3:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 10, i64 -1, ptr @__instrumentor_str.2, i8 1)
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP3]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP2]])
; CHECK-NEXT:    ret void
;
  %nt = alloca i8
  %call = call ptr @_ZnamRKSt9nothrow_t12__hot_cold_t(i64 10, ptr %nt, i8 7) #0
  call void @dummy(ptr %call)
  ret void
}

define void @array_new_align_nothrow_hot_cold() {
; CHECK-LABEL: define void @array_new_align_nothrow_hot_cold() {
; CHECK-NEXT:    [[NT:%.*]] = alloca i8, align 1
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_post_alloca(ptr [[NT]], i64 1, i64 1)
; CHECK-NEXT:    [[TMP4:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP1]])
; CHECK-NEXT:    [[CALL:%.*]] = call ptr @_ZnamSt11align_val_tRKSt9nothrow_t12__hot_cold_t(i64 10, i64 8, ptr [[TMP4]], i8 7) #[[ATTR0]]
; CHECK-NEXT:    [[TMP3:%.*]] = call ptr @__instrumentor_post_allocation_call(ptr [[CALL]], i64 10, i64 8, ptr @__instrumentor_str.3, i8 1)
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[TMP3]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP2]])
; CHECK-NEXT:    ret void
;
  %nt = alloca i8
  %call = call ptr @_ZnamSt11align_val_tRKSt9nothrow_t12__hot_cold_t(i64 10, i64 8, ptr %nt, i8 7) #0
  call void @dummy(ptr %call)
  ret void
}

define void @size_returning_test() {
; CHECK-LABEL: define void @size_returning_test() {
; CHECK-NEXT:    [[CALL:%.*]] = call { ptr, i64 } @__size_returning_new(i64 10)
; CHECK-NEXT:    [[P:%.*]] = extractvalue { ptr, i64 } [[CALL]], 0
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[P]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP1]])
; CHECK-NEXT:    ret void
;
  %call = call {ptr, i64} @__size_returning_new(i64 10)
  %p  = extractvalue {ptr, i64} %call, 0
  call void @dummy(ptr %p)
  ret void
}

define void @size_returning_aligned_test() {
; CHECK-LABEL: define void @size_returning_aligned_test() {
; CHECK-NEXT:    [[CALL:%.*]] = call { ptr, i64 } @__size_returning_new_aligned(i64 10, i64 8)
; CHECK-NEXT:    [[P:%.*]] = extractvalue { ptr, i64 } [[CALL]], 0
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[P]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP1]])
; CHECK-NEXT:    ret void
;
  %call = call {ptr, i64} @__size_returning_new_aligned(i64 10, i64 8)
  %p  = extractvalue {ptr, i64} %call, 0
  call void @dummy(ptr %p)
  ret void
}

define void @size_returning_update_test() {
; CHECK-LABEL: define void @size_returning_update_test() {
; CHECK-NEXT:    [[CALL:%.*]] = call { ptr, i64 } @__size_returning_new_hot_cold(i64 10, i8 7)
; CHECK-NEXT:    [[P:%.*]] = extractvalue { ptr, i64 } [[CALL]], 0
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[P]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP1]])
; CHECK-NEXT:    ret void
;
  %call = call {ptr, i64} @__size_returning_new_hot_cold(i64 10, i8 7)
  %p  = extractvalue {ptr, i64} %call, 0
  call void @dummy(ptr %p)
  ret void
}

define void @size_returning_aligned_update_test() {
; CHECK-LABEL: define void @size_returning_aligned_update_test() {
; CHECK-NEXT:    [[CALL:%.*]] = call { ptr, i64 } @__size_returning_new_aligned_hot_cold(i64 10, i64 8, i8 7)
; CHECK-NEXT:    [[P:%.*]] = extractvalue { ptr, i64 } [[CALL]], 0
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_call_arg(ptr [[P]])
; CHECK-NEXT:    call void @dummy(ptr [[TMP1]])
; CHECK-NEXT:    ret void
;
  %call = call {ptr, i64} @__size_returning_new_aligned_hot_cold(i64 10, i64 8, i8 7)
  %p  = extractvalue {ptr, i64} %call, 0
  call void @dummy(ptr %p)
  ret void
}

;; So that instcombine doesn't optimize out the call.
declare void @dummy(ptr)

declare ptr @_Znwm(i64)
declare ptr @_ZnwmSt11align_val_t(i64, i64)
declare ptr @_ZnwmRKSt9nothrow_t(i64, ptr)
declare ptr @_ZnwmSt11align_val_tRKSt9nothrow_t(i64, i64, ptr)
declare ptr @_Znam(i64)
declare ptr @_ZnamSt11align_val_t(i64, i64)
declare ptr @_ZnamRKSt9nothrow_t(i64, ptr)
declare ptr @_ZnamSt11align_val_tRKSt9nothrow_t(i64, i64, ptr)
declare ptr @_Znwm12__hot_cold_t(i64, i8)
declare ptr @_ZnwmSt11align_val_t12__hot_cold_t(i64, i64, i8)
declare ptr @_ZnwmRKSt9nothrow_t12__hot_cold_t(i64, ptr, i8)
declare ptr @_ZnwmSt11align_val_tRKSt9nothrow_t12__hot_cold_t(i64, i64, ptr, i8)
declare ptr @_Znam12__hot_cold_t(i64, i8)
declare ptr @_ZnamSt11align_val_t12__hot_cold_t(i64, i64, i8)
declare ptr @_ZnamRKSt9nothrow_t12__hot_cold_t(i64, ptr, i8)
declare ptr @_ZnamSt11align_val_tRKSt9nothrow_t12__hot_cold_t(i64, i64, ptr, i8)


declare {ptr, i64} @__size_returning_new(i64)
declare {ptr, i64} @__size_returning_new_hot_cold(i64, i8)
declare {ptr, i64} @__size_returning_new_aligned(i64, i64)
declare {ptr, i64} @__size_returning_new_aligned_hot_cold(i64, i64, i8)

attributes #0 = { builtin allocsize(0)  }
;.
; CHECK: attributes #[[ATTR0]] = { builtin allocsize(0) }
;.
